<?php
 // $Id$

 /**
  * @file
  *   nginx implementation of the cdn service type.
  */

/**
 * A class containing the nginx implementation of the cdn service.
 *
 * This class is conditionally loaded when the "--example_service_type=cdn"
 * option is passed to provision-verify commands run on sites.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class Provision_Service_cdn_nginx extends Provision_Service_cdn {
  /**
   * Initialize this class, including option handling.
   */
  function init() {
    parent::init();

    /**
     * Register configuration classes for the create_config / delete_config methods.
     */
    $this->configs['site'][] = 'Provision_Config_CDN';
  }

  /**
   * Initialize the site.
   */
  function init_site() {
    parent::init_site();

    /**
     *  Define the location where the cdn vhost confis should be stored.
     */
    $this->server->cdn_config_path = $this->context->platform->web_server->http_vhostd_path;
  }

  /**
   * Pass additional values to the config file templates.
   */
  function config_data($config = null, $class = null) {
    $data = parent::config_data($config, $class);

    // Define the server as the server that the platform is running on
    $data['server'] = $this->context->platform->web_server;

    $data['http_port'] = $this->context->platform->web_server->http_port;

    // We assign this generic catch all for standard http.
    // The SSL based services will override this with the
    // correct ip address.
    if (sizeof($this->context->platform->web_server->ip_addresses)) {
      // Use the first IP address for all standard virtual hosts.
      $data['ip_address'] = $this->context->platform->web_server->ip_addresses[0];
    }
    else {
      // If no external ip addresses are defined, we fall back on *:port
      // There will be no SSL , so that's fine.
      $data['ip_address'] = '*';
    }

    if ($config == 'site') {
      $data['redirect_url'] = $this->context->uri;
    }

    return $data;
  }

  /**
   * Implementation of service verify.
   */
  function verify() {
    parent::verify();
    if ($this->context->type == 'site') {
      // Create the configuration file directory.
      provision_file()->create_dir($this->server->cdn_config_path, dt("NginX CDN"), 0700);
      // Sync the directory to the remote server if needed.
      $this->sync($this->server->cdn_config_path);
    }
  }

}

